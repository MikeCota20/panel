{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrmik\\\\Desktop\\\\panel\\\\panel\\\\src\\\\components\\\\Comments.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Comments() {\n  _s();\n  const {\n    id\n  } = useParams(); // Obtiene el ID del capítulo desde la URL\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Obtener comentarios del capítulo actual\n    const fetchComments = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/chapters/${id}/comments`);\n        setComments(response.data);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchComments();\n  }, [id]);\n  const handleCommentSubmit = async e => {\n    e.preventDefault();\n    if (!newComment.trim()) return;\n    try {\n      await axios.post(`http://localhost:5000/api/chapters/${id}/comments`, {\n        text: newComment\n      });\n      setComments([...comments, {\n        text: newComment,\n        created_at: new Date().toISOString()\n      }]);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error submitting comment:', error);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading comments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Leave a comment...\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-list\",\n      children: comments.length > 0 ? comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: new Date(comment.date).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments yet. Be the first!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(Comments, \"hl1L6kHcHLWzbQMNjRDMjmCEpco=\", false, function () {\n  return [useParams];\n});\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","Comments","_s","id","comments","setComments","newComment","setNewComment","loading","setLoading","fetchComments","response","get","data","error","console","handleCommentSubmit","e","preventDefault","trim","post","text","created_at","Date","toISOString","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","value","onChange","target","placeholder","required","type","length","map","comment","index","content","date","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/mrmik/Desktop/panel/panel/src/components/Comments.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Comments() {\r\n  const { id } = useParams(); // Obtiene el ID del capítulo desde la URL\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Obtener comentarios del capítulo actual\r\n    const fetchComments = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/chapters/${id}/comments`);\r\n        setComments(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching comments:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchComments();\r\n  }, [id]);\r\n\r\n  const handleCommentSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!newComment.trim()) return;\r\n\r\n    try {\r\n      await axios.post(`http://localhost:5000/api/chapters/${id}/comments`, {\r\n        text: newComment,\r\n      });\r\n      setComments([...comments, { text: newComment, created_at: new Date().toISOString() }]);\r\n      setNewComment('');\r\n    } catch (error) {\r\n      console.error('Error submitting comment:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading comments...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"comments-section\">\r\n      <h3>Comments</h3>\r\n      <form onSubmit={handleCommentSubmit}>\r\n        <textarea\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          placeholder=\"Leave a comment...\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n\r\n      <div className=\"comments-list\">\r\n        {comments.length > 0 ? (\r\n          comments.map((comment, index) => (\r\n            <div key={index} className=\"comment\">\r\n              <p>{comment.content}</p>\r\n              <small>{new Date(comment.date).toLocaleString()}</small>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No comments yet. Be the first!</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Comments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}